// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider   = "prisma-client-js"
    engineType = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    MANAGER
    USER

    @@map("UserRoles")
}

enum UserStatus {
    ACTIVE
    BANNED
    PENDING
    REJECTED

    @@map("UserStatuses")
}

enum UserAuthLogType {
    LOGIN
    REFRESH
}

enum CryptocurrencyType {
    COIN
    TOKEN
}

enum CryptocurrencyStatus {
    ACTIVE
    INACTIVE
    ARCHIVED
}

enum TransactionType {
    DEPOSIT
    WITHDRAWAL
}

enum TransactionStatus {
    PENDING
    COMPLETE
    CANCELLED
}

enum DepositWalletStatus {
    ACTIVE
    INACTIVE
    ARCHIVED

    @@map("DepositAddressStatus")
}

model User {
    id              String     @id @default(cuid())
    username        String     @unique
    email           String     @unique
    emailVerifiedAt DateTime?
    passwordHash    String?
    roles           UserRole[] @default([USER])
    status          UserStatus @default(PENDING)
    balance         Float      @default(0)
    tradingBalance  Float      @default(0)
    withdrawnFunds  Float      @default(0)

    firstName String?
    lastName  String?
    country   String?
    phone     String?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    Sessions       Session[]
    // Strategy    Strategy[]
    Transactions   Transaction[]
    DepositWallets DepositWallet[]
    UserAuthLog    UserAuthLog[]
}

model UserAuthLog {
    id        String          @id @default(cuid())
    userId    String
    sessionId String
    type      UserAuthLogType

    ipAddress String

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    User    User    @relation(references: [id], fields: [userId], onDelete: Cascade)
    Session Session @relation(references: [id], fields: [sessionId], onDelete: Cascade)
}

model Session {
    id           String @id @default(cuid())
    userId       String
    refreshToken String @unique

    revokedAt DateTime?
    expiresAt DateTime
    updatedAt DateTime  @updatedAt
    createdAt DateTime  @default(now())

    User        User          @relation(references: [id], fields: [userId], onDelete: Cascade)
    UserAuthLog UserAuthLog[]
}

model Cryptocurrency {
    id               String               @id @default(cuid())
    name             String
    symbol           String               @unique
    decimals         Int
    type             CryptocurrencyType
    status           CryptocurrencyStatus @default(ACTIVE)
    withdrawalMinUsd Float                @default(0)
    withdrawalMaxUsd Float                @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Transactions   Transaction[]
    DepositWallets DepositWallet[]
}

model Transaction {
    id        String            @id @default(cuid())
    userId    String
    crypto    String
    wallet    String
    amount    Float
    amountUsd Float
    type      TransactionType
    status    TransactionStatus @default(PENDING)

    txHash      String?
    description String?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    User   User           @relation(fields: [userId], references: [id])
    Crypto Cryptocurrency @relation(fields: [crypto], references: [symbol])
}

model DepositWallet {
    id          String              @id @default(cuid())
    userId      String
    crypto      String
    wallet      String
    status      DepositWalletStatus @default(ACTIVE)
    description String?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    User   User           @relation(fields: [userId], references: [id])
    Crypto Cryptocurrency @relation(fields: [crypto], references: [symbol])

    @@unique([userId, crypto, wallet, status])
    @@map("DepositAddress")
}

// model Strategy {
//     id         String  @id @default(cuid())
//     userId     String
//     cryptoPair String
//     pnl        Float
//     profit     Float
//     isActive   Boolean @default(true)
// 
//     updatedAt DateTime @updatedAt
//     createdAt DateTime @default(now())
// 
//     User User @relation(fields: [userId], references: [id])
// }
