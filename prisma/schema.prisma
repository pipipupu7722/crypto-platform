// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider   = "prisma-client-js"
    engineType = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRoles {
    ADMIN
    MANAGER
    USER
}

enum UserStatuses {
    ACTIVE
    PENDING
    BANNED
}

model User {
    id              String       @id @default(cuid())
    username        String       @unique
    email           String       @unique
    emailVerifiedAt DateTime?
    passwordHash    String?
    roles           UserRoles[]  @default([USER])
    status          UserStatuses @default(PENDING)
    balance         Float        @default(0)

    firstName String?
    lastName  String?
    country   String?
    phone     String?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    sessions    Session[]
    // strategy    Strategy[]
    transaction Transaction[]
}

model Session {
    id           String @id @default(cuid())
    userId       String
    refreshToken String @unique

    revokedAt DateTime?
    expiresAt DateTime
    updatedAt DateTime  @updatedAt
    createdAt DateTime  @default(now())

    user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum TransactionType {
    DEPOSIT
    WITHDRAWAL
}

enum TransactionStatus {
    PENDING
    COMPLETE
    CANCELLED
}

model Transaction {
    id     String            @id @default(cuid())
    userId String
    amount Float?
    type   TransactionType
    status TransactionStatus @default(PENDING)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
}

// model Strategy {
//     id         String  @id @default(cuid())
//     userId     String
//     cryptoPair String
//     pnl        Float
//     profit     Float
//     isActive   Boolean @default(true)
// 
//     updatedAt DateTime @updatedAt
//     createdAt DateTime @default(now())
// 
//     user User @relation(fields: [userId], references: [id])
// }
